package bot

import (
	"GPTGRAMM/internal/api"
	"GPTGRAMM/internal/storage"
	"fmt"
	"log"
	"strings"
	"sync"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ —Ç–∏–ø–∏ —Ç–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏
const (
	maxRequestsPerDay = 10
	bypassCode        = "UNLIMITED_ACCESS" // –ö–æ–¥–æ–≤–∞ —Ñ—Ä–∞–∑–∞ –¥–ª—è –æ–±—Ö–æ–¥—É –ª—ñ–º—ñ—Ç—É
	maxStoredMessages = 100                // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
	logFormat         = "%-25s | %-10d | %s\n"
)

// –î–æ–¥–∞—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
type UserSettings struct {
	Model        string
	RequestCount int
	LastRequest  time.Time
}

// Bot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –æ—Å–Ω–æ–≤–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
type Bot struct {
	api        *tgbotapi.BotAPI
	storage    *storage.Storage
	chatGPTs   sync.Map
	users      sync.Map
	messageIDs sync.Map // chatID -> *MessageQueue
}

// MessageQueue –∑–±–µ—Ä—ñ–≥–∞—î –æ–±–º–µ–∂–µ–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
type MessageQueue struct {
	mu      sync.Mutex
	ids     []int
	maxSize int
}

func NewMessageQueue(size int) *MessageQueue {
	return &MessageQueue{
		ids:     make([]int, 0, size),
		maxSize: size,
	}
}

func (q *MessageQueue) Add(id int) {
	q.mu.Lock()
	defer q.mu.Unlock()

	q.ids = append(q.ids, id)
	if len(q.ids) > q.maxSize {
		q.ids = q.ids[1:]
	}
}

func (q *MessageQueue) GetAll() []int {
	q.mu.Lock()
	defer q.mu.Unlock()

	result := make([]int, len(q.ids))
	copy(result, q.ids)
	return result
}

// NewBot —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
func NewBot(token string) (*Bot, error) {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("–ø–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞: %w", err)
	}

	storage, err := storage.NewStorage()
	if err != nil {
		return nil, fmt.Errorf("–ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å—Ö–æ–≤–∏—â–∞: %w", err)
	}

	return &Bot{
		api:     bot,
		storage: storage,
	}, nil
}

// Start –∑–∞–ø—É—Å–∫–∞—î –±–æ—Ç–∞ —Ç–∞ –ø–æ—á–∏–Ω–∞—î –æ–±—Ä–æ–±–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
func (b *Bot) Start() {
	log.Printf("–ë–æ—Ç %s –∑–∞–ø—É—â–µ–Ω–æ", b.api.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	for update := range updates {
		if update.CallbackQuery != nil {
			go b.handleCallback(update.CallbackQuery)
		} else if update.Message != nil {
			go b.handleMessage(update.Message)
		}
	}
}

func (b *Bot) handleMessage(message *tgbotapi.Message) {
	chatID := message.Chat.ID
	text := message.Text

	// –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
	queue, _ := b.messageIDs.LoadOrStore(chatID, NewMessageQueue(maxStoredMessages))
	queue.(*MessageQueue).Add(message.MessageID)

	switch text {
	case "/start":
		logAction("–ö–û–ú–ê–ù–î–ê", chatID, "üëã –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏")
		b.handleStart(chatID)
	case "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
		logAction("–ö–û–ú–ê–ù–î–ê", chatID, "üìä –ü–µ—Ä–µ–≥–ª—è–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
		b.handleStats(chatID)
	case "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è":
		logAction("–ö–û–ú–ê–ù–î–ê", chatID, "‚öôÔ∏è –í—ñ–¥–∫—Ä–∏—Ç–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
		b.handleSettings(chatID)
	case "üîÑ –ù–æ–≤–∏–π —á–∞—Ç":
		b.handleNewChat(chatID)
	case "‚ùì –î–æ–ø–æ–º–æ–≥–∞":
		logAction("–ö–û–ú–ê–ù–î–ê", chatID, "‚ùì –ó–∞–ø–∏—Ç –¥–æ–ø–æ–º–æ–≥–∏")
		b.handleHelp(chatID)
	case bypassCode:
		logAction("–ö–û–ú–ê–ù–î–ê", chatID, "üîì –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –∫–æ–¥ –æ–±—Ö–æ–¥—É –ª—ñ–º—ñ—Ç—É")
		b.handleBypassCode(chatID)
	default:
		if len(text) > 3 && text[:3] == "sk-" {
			logAction("–ö–û–ú–ê–ù–î–ê", chatID, "üîë –û—Ç—Ä–∏–º–∞–Ω–æ API –∫–ª—é—á")
			b.handleAPIKey(chatID, text)
		} else {
			// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∑–≤–µ—Ä–Ω–µ–Ω—å –¥–æ GPT
			if !b.checkRequestLimit(chatID) && text != bypassCode {
				logAction("–ü–û–ú–ò–õ–ö–ê", chatID, "‚ö†Ô∏è –î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤")
				b.sendMessage(chatID, "‚ö†Ô∏è –í–∏ –¥–æ—Å—è–≥–ª–∏ –ª—ñ–º—ñ—Ç—É –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–¥–æ–≤—É —Ñ—Ä–∞–∑—É –¥–ª—è –Ω–µ–æ–±–º–µ–∂–µ–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É.")
				return
			}
			b.handleGPTRequest(chatID, text)
		}
	}
}

func (b *Bot) handleStart(chatID int64) {
	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤–∂–µ API –∫–ª—é—á
	apiKey, err := b.storage.GetAPIKey(chatID)
	if err == nil && apiKey != "" {
		text := `üëã –ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º! –†–∞–¥–∏–π –≤–∞—Å –∑–Ω–æ–≤—É –±–∞—á–∏—Ç–∏.
–ú–æ–∂–µ–º–æ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –Ω–∞—à—É —Ä–æ–∑–º–æ–≤—É. –ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!

–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º.`
		msg := tgbotapi.NewMessage(chatID, text)
		msg.ReplyMarkup = createMainKeyboard()
		if _, err := b.api.Send(msg); err != nil {
			log.Printf("–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: %v", err)
		}
		return
	}

	// –Ø–∫—â–æ –∫–ª—é—á–∞ –Ω–µ–º–∞—î, –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
	text := `üëã –í—ñ—Ç–∞—é! –Ø –±–æ—Ç, —Å—Ç–≤–æ—Ä–µ–Ω–∏–π @hesher116, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∑ ChatGPT –Ω–∞–ø—Ä—è–º—É —á–µ—Ä–µ–∑ –≤–∞—à OpenAI API –∫–ª—é—á.

–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π OpenAI API –∫–ª—é—á.
–Ø–∫—â–æ —É –≤–∞—Å –π–æ–≥–æ –Ω–µ–º–∞—î, –æ—Ç—Ä–∏–º–∞–π—Ç–µ –Ω–∞ —Å–∞–π—Ç—ñ: https://platform.openai.com/account/api-keys`

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = createMainKeyboard()
	if _, err := b.api.Send(msg); err != nil {
		log.Printf("–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: %v", err)
	}
}

func (b *Bot) handleHelp(chatID int64) {
	text := `üìå –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:

/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É
/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
/change_key - –ó–º—ñ–Ω–∏—Ç–∏ API –∫–ª—é—á

–ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ —è –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –¥–æ ChatGPT!`

	b.sendMessage(chatID, text)
}

func (b *Bot) handleAPIKey(chatID int64, apiKey string) {
	logAction("API_KEY", chatID, "–°–ø—Ä–æ–±–∞ –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–æ–≤–∏–π API –∫–ª—é—á")

	if err := b.storage.SaveAPIKey(chatID, apiKey); err != nil {
		logAction("–ü–û–ú–ò–õ–ö–ê", chatID, fmt.Sprintf("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ API –∫–ª—é—á: %v", err))
		b.sendMessage(chatID, "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–ª—é—á–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
		return
	}

	logAction("API_KEY", chatID, "API –∫–ª—é—á —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
	msg := tgbotapi.NewMessage(chatID, "‚úÖ API –∫–ª—é—á —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
	msg.ReplyMarkup = createMainKeyboard()
	if _, err := b.api.Send(msg); err != nil {
		log.Printf("–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: %v", err)
	}
}

func (b *Bot) handleGPTRequest(chatID int64, text string) {
	// –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π ChatGPT
	gptInstance, _ := b.chatGPTs.LoadOrStore(chatID, func() interface{} {
		apiKey, err := b.storage.GetAPIKey(chatID)
		if err != nil {
			return nil
		}
		model, _ := b.storage.GetUserSettings(chatID)
		gpt := api.NewChatGPT(apiKey)
		gpt.SetModel(model)
		return gpt
	}())

	if gptInstance == nil {
		b.sendMessage(chatID, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π API –∫–ª—é—á.")
		return
	}

	gpt := gptInstance.(*api.ChatGPT)

	// –õ–æ–≥—É—î–º–æ –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
	model, _ := b.storage.GetUserSettings(chatID)
	modelName := map[string]string{api.ModelGPT3: "GPT-3.5", api.ModelGPT4: "GPT-4"}[model]
	logAction("–î–Ü–ê–õ–û–ì", chatID, fmt.Sprintf("\n–ó–∞–ø–∏—Ç (%s):\n%s", modelName, text))

	response, err := gpt.SendMessage(text)
	if err != nil {
		logAction("–ü–û–ú–ò–õ–ö–ê", chatID, fmt.Sprintf("–ü–æ–º–∏–ª–∫–∞ GPT: %v", err))
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –ü–æ–º–∏–ª–∫–∞: %v", err))
		return
	}

	// –õ–æ–≥—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å GPT
	logAction("–î–Ü–ê–õ–û–ì", chatID, fmt.Sprintf("\n–í—ñ–¥–ø–æ–≤—ñ–¥—å:\n%s", response))

	if err := b.storage.SaveToHistory(chatID, text, response); err != nil {
		log.Printf("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ —ñ—Å—Ç–æ—Ä—ñ—é: %v", err)
	}

	b.sendMessage(chatID, response, true)
}

func (b *Bot) sendMessage(chatID int64, text string, markdown ...bool) {
	msg := tgbotapi.NewMessage(chatID, text)
	if len(markdown) > 0 && markdown[0] {
		msg.ParseMode = tgbotapi.ModeMarkdown
	}

	// –ó–∞–≤–∂–¥–∏ –¥–æ–¥–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É, —è–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ —ñ–Ω—à–µ
	if msg.ReplyMarkup == nil {
		msg.ReplyMarkup = createMainKeyboard()
	}

	sent, err := b.api.Send(msg)
	if err != nil {
		log.Printf("–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: %v", err)
		return
	}

	// –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞
	queue, _ := b.messageIDs.LoadOrStore(chatID, NewMessageQueue(maxStoredMessages))
	queue.(*MessageQueue).Add(sent.MessageID)
}

// –û–Ω–æ–≤–ª—é—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é createMainKeyboard
func createMainKeyboard() tgbotapi.ReplyKeyboardMarkup {
	buttons := [][]tgbotapi.KeyboardButton{
		{
			tgbotapi.KeyboardButton{Text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"},
			tgbotapi.KeyboardButton{Text: "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"},
		},
		{
			tgbotapi.KeyboardButton{Text: "üîÑ –ù–æ–≤–∏–π —á–∞—Ç"},
			tgbotapi.KeyboardButton{Text: "‚ùì –î–æ–ø–æ–º–æ–≥–∞"},
		},
	}

	return tgbotapi.ReplyKeyboardMarkup{
		Keyboard:       buttons,
		ResizeKeyboard: true,
	}
}

// –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
func (b *Bot) handleStats(chatID int64) {
	value, exists := b.users.Load(chatID)

	var requestCount int
	if exists && value != nil {
		settings := value.(UserSettings)
		requestCount = settings.RequestCount
	}

	text := fmt.Sprintf("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ó–∞–ø–∏—Ç—ñ–≤ —Å—å–æ–≥–æ–¥–Ω—ñ: %d/%d",
		requestCount, maxRequestsPerDay)
	b.sendMessage(chatID, text)
}

func (b *Bot) handleSettings(chatID int64) {
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("GPT-3.5", "model_gpt3"),
			tgbotapi.NewInlineKeyboardButtonData("GPT-4", "model_gpt4"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, "‚öôÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å GPT:")
	msg.ReplyMarkup = keyboard
	if _, err := b.api.Send(msg); err != nil {
		log.Printf("–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: %v", err)
	}
}

func (b *Bot) handleBypassCode(chatID int64) {
	// –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—ñ
	value, _ := b.users.Load(chatID)
	var settings UserSettings
	if value != nil {
		settings = value.(UserSettings)
	}

	// –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ —ñ–Ω—à—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
	settings.RequestCount = 0
	settings.LastRequest = time.Now()

	b.users.Store(chatID, settings)
	b.sendMessage(chatID, "‚úÖ –õ—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤ –∑–Ω—è—Ç–æ")
}

// –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –ª—ñ–º—ñ—Ç—É –∑–∞–ø–∏—Ç—ñ–≤
func (b *Bot) checkRequestLimit(chatID int64) bool {
	value, exists := b.users.Load(chatID)

	var settings UserSettings
	if !exists || value == nil {
		// –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
		settings = UserSettings{
			Model:        api.ModelGPT3,
			RequestCount: 0,
			LastRequest:  time.Now(),
		}
	} else {
		settings = value.(UserSettings)
	}

	// –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫, —è–∫—â–æ –º–∏–Ω—É–ª–æ 24 –≥–æ–¥–∏–Ω–∏
	if time.Since(settings.LastRequest).Hours() >= 24 {
		settings.RequestCount = 0
		settings.LastRequest = time.Now()
	}

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç
	if settings.RequestCount >= maxRequestsPerDay {
		return false
	}

	// –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫
	settings.RequestCount++
	settings.LastRequest = time.Now()
	b.users.Store(chatID, settings)

	return true
}

// –û–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ callback-—ñ–≤
func (b *Bot) handleCallback(callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID
	logAction("CALLBACK", chatID, fmt.Sprintf("–î—ñ—è: %s", callback.Data))

	callbackResponse := tgbotapi.NewCallback(callback.ID, "")
	if _, err := b.api.Request(callbackResponse); err != nil {
		log.Printf("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ callback: %v", err)
	}

	var msg tgbotapi.MessageConfig

	switch callback.Data {
	case "clear_confirm":
		// –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
		updates, err := b.api.GetUpdates(tgbotapi.UpdateConfig{
			Offset:  0,
			Limit:   100,
			Timeout: 0,
		})
		if err != nil {
			log.Printf("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: %v", err)
			return
		}

		// –í–∏–¥–∞–ª—è—î–º–æ –∫–æ–∂–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
		for _, update := range updates {
			if update.Message != nil && update.Message.Chat.ID == chatID {
				deleteMsg := tgbotapi.NewDeleteMessage(chatID, update.Message.MessageID)
				if _, err := b.api.Request(deleteMsg); err != nil {
					log.Printf("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è %d: %v", update.Message.MessageID, err)
				}
			}
		}

		// –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è
		msg = tgbotapi.NewMessage(chatID, "‚úÖ –Ü—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É –æ—á–∏—â–µ–Ω–æ")
		msg.ReplyMarkup = createMainKeyboard()

	case "clear_cancel":
		msg = tgbotapi.NewMessage(chatID, "üîÑ –û—á–∏—â–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Å–∫–∞—Å–æ–≤–∞–Ω–æ")

	case "model_gpt3":
		// –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –º–æ–¥–µ–ª—å
		currentModel, _ := b.storage.GetUserSettings(chatID)
		if currentModel == api.ModelGPT3 {
			logAction("–ú–û–î–ï–õ–¨", chatID, "–°–ø—Ä–æ–±–∞ –∑–º—ñ–Ω–∏ –Ω–∞ –ø–æ—Ç–æ—á–Ω—É –º–æ–¥–µ–ª—å GPT-3.5")
			msg = tgbotapi.NewMessage(chatID, "‚ÑπÔ∏è GPT-3.5 –≤–∂–µ —î –ø–æ—Ç–æ—á–Ω–æ—é –º–æ–¥–µ–ª–ª—é")
		} else {
			logAction("–ú–û–î–ï–õ–¨", chatID, "–ó–º—ñ–Ω–∞ –Ω–∞ GPT-3.5")
			if err := b.storage.SaveUserSettings(chatID, api.ModelGPT3); err != nil {
				logAction("–ü–û–ú–ò–õ–ö–ê", chatID, fmt.Sprintf("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–º—ñ–Ω–∏—Ç–∏ –º–æ–¥–µ–ª—å: %v", err))
				msg = tgbotapi.NewMessage(chatID, "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –º–æ–¥–µ–ª—ñ")
			} else {
				msg = tgbotapi.NewMessage(chatID, "‚úÖ –ú–æ–¥–µ–ª—å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ GPT-3.5")
			}
		}

	case "model_gpt4":
		// –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –º–æ–¥–µ–ª—å
		currentModel, _ := b.storage.GetUserSettings(chatID)
		if currentModel == api.ModelGPT4 {
			logAction("–ú–û–î–ï–õ–¨", chatID, "–°–ø—Ä–æ–±–∞ –∑–º—ñ–Ω–∏ –Ω–∞ –ø–æ—Ç–æ—á–Ω—É –º–æ–¥–µ–ª—å GPT-4")
			msg = tgbotapi.NewMessage(chatID, "‚ÑπÔ∏è GPT-4 –≤–∂–µ —î –ø–æ—Ç–æ—á–Ω–æ—é –º–æ–¥–µ–ª–ª—é")
		} else {
			logAction("–ú–û–î–ï–õ–¨", chatID, "–ó–º—ñ–Ω–∞ –Ω–∞ GPT-4")
			if err := b.storage.SaveUserSettings(chatID, api.ModelGPT4); err != nil {
				logAction("–ü–û–ú–ò–õ–ö–ê", chatID, fmt.Sprintf("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–º—ñ–Ω–∏—Ç–∏ –º–æ–¥–µ–ª—å: %v", err))
				msg = tgbotapi.NewMessage(chatID, "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –º–æ–¥–µ–ª—ñ")
			} else {
				msg = tgbotapi.NewMessage(chatID, "‚úÖ –ú–æ–¥–µ–ª—å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ GPT-4")
			}
		}
	}

	if _, err := b.api.Send(msg); err != nil {
		log.Printf("–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: %v", err)
	}
}

// –û–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç—É
func (b *Bot) handleNewChat(chatID int64) {
	logAction("–ö–û–ú–ê–ù–î–ê", chatID, "üîÑ –ù–æ–≤–∏–π —á–∞—Ç")

	// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ API –∫–ª—é—á–∞
	apiKey, err := b.storage.GetAPIKey(chatID)
	if err != nil || apiKey == "" {
		logAction("–ü–û–ú–ò–õ–ö–ê", chatID, "API –∫–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
		b.sendMessage(chatID, "üëã –î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π OpenAI API –∫–ª—é—á.")
		return
	}

	// –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –º–æ–¥–µ–ª—å
	model, _ := b.storage.GetUserSettings(chatID)

	// –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –Ω–æ–≤–æ–≥–æ —á–∞—Ç—É
	text := fmt.Sprintf(`üÜï –ü–æ—á–∏–Ω–∞—î–º–æ –Ω–æ–≤–∏–π —á–∞—Ç!

ü§ñ –ü–æ—Ç–æ—á–Ω–∞ –º–æ–¥–µ–ª—å: %s
‚ö°Ô∏è –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –æ—á–∏—â–µ–Ω–Ω—è...

üí° –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥`,
		map[string]string{api.ModelGPT3: "GPT-3.5", api.ModelGPT4: "GPT-4"}[model])

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = createMainKeyboard()
	tempMsg, err := b.api.Send(msg)
	if err != nil {
		logAction("–ü–û–ú–ò–õ–ö–ê", chatID, fmt.Sprintf("–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: %v", err))
		return
	}

	// –û—á–∏—â–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
	_ = b.storage.ClearHistory(chatID)

	// –ü—Ä–æ—Ü–µ—Å –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
	deletedCount := 0
	failedCount := 0
	var mu sync.Mutex
	var wg sync.WaitGroup

	// –ë–µ—Ä–µ–º–æ –±—ñ–ª—å—à–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ
	lastMsgID := tempMsg.MessageID
	startID := lastMsgID - 1000
	if startID < 1 {
		startID = 1
	}

	workers := 20
	messagesChan := make(chan int, lastMsgID-startID)

	// –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–æ—Ä–∫–µ—Ä–∏
	for i := 0; i < workers; i++ {
		wg.Add(1)
		go func() {
			defer wg.Done()
			for msgID := range messagesChan {
				if msgID != tempMsg.MessageID { // –ù–µ –≤–∏–¥–∞–ª—è—î–º–æ –Ω–∞—à–µ —Ç–∏–º—á–∞—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
					deleteMsg := tgbotapi.NewDeleteMessage(chatID, msgID)
					if _, err := b.api.Request(deleteMsg); err != nil {
						if !strings.Contains(err.Error(), "message to delete not found") {
							mu.Lock()
							failedCount++
							mu.Unlock()
						}
					} else {
						mu.Lock()
						deletedCount++
						mu.Unlock()
					}
				}
			}
		}()
	}

	// –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ ID –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
	for msgID := lastMsgID; msgID > startID; msgID-- {
		messagesChan <- msgID
	}
	close(messagesChan)
	wg.Wait()

	// –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω —á–∞—Ç—É
	gpt := api.NewChatGPT(apiKey)
	gpt.SetModel(model)
	b.chatGPTs.Store(chatID, gpt)

	// –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
	deleteMsg := tgbotapi.NewDeleteMessage(chatID, tempMsg.MessageID)
	b.api.Request(deleteMsg)

	// –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
	resultText := fmt.Sprintf(`üÜï –ü–æ—á–∏–Ω–∞—î–º–æ –Ω–æ–≤–∏–π —á–∞—Ç!

ü§ñ –ü–æ—Ç–æ—á–Ω–∞ –º–æ–¥–µ–ª—å: %s
üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: %d

üí≠ –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ —á–∞—Ç–æ–º –∞–±–æ –≤–∏–±—Ä–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ`,
		map[string]string{api.ModelGPT3: "GPT-3.5", api.ModelGPT4: "GPT-4"}[model],
		deletedCount)

	finalMsg := tgbotapi.NewMessage(chatID, resultText)
	finalMsg.ReplyMarkup = createMainKeyboard()
	sent, err := b.api.Send(finalMsg)
	if err != nil {
		logAction("–ü–û–ú–ò–õ–ö–ê", chatID, fmt.Sprintf("–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: %v", err))
		return
	}

	// –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –Ω–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
	queue, _ := b.messageIDs.LoadOrStore(chatID, NewMessageQueue(maxStoredMessages))
	queue.(*MessageQueue).Add(sent.MessageID)

	logAction("–†–ï–ó–£–õ–¨–¢–ê–¢", chatID, fmt.Sprintf("–í–∏–¥–∞–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: %d", deletedCount))
}

// –û–Ω–æ–≤–ª—é—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é logAction
func logAction(action string, chatID int64, details string) {

	log.Printf(logFormat, action, chatID, details)
}
