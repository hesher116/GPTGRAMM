package bot

import (
	"fmt"
	"log"
	"GPTGRAMM/internal/api"
	"GPTGRAMM/internal/storage"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// Bot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –æ—Å–Ω–æ–≤–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
type Bot struct {
	api     *tgbotapi.BotAPI
	storage *storage.Storage
	chatGPT *api.ChatGPT
}

// NewBot —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
func NewBot(token string) (*Bot, error) {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("–ø–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞: %w", err)
	}

	storage, err := storage.NewStorage()
	if err != nil {
		return nil, fmt.Errorf("–ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å—Ö–æ–≤–∏—â–∞: %w", err)
	}

	return &Bot{
		api:     bot,
		storage: storage,
	}, nil
}

// Start –∑–∞–ø—É—Å–∫–∞—î –±–æ—Ç–∞ —Ç–∞ –ø–æ—á–∏–Ω–∞—î –æ–±—Ä–æ–±–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
func (b *Bot) Start() {
	log.Printf("–ë–æ—Ç %s –∑–∞–ø—É—â–µ–Ω–æ", b.api.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		go b.handleMessage(update.Message)
	}
}

func (b *Bot) handleMessage(message *tgbotapi.Message) {
	chatID := message.Chat.ID
	text := message.Text

	switch text {
	case "/start":
		b.handleStart(chatID)
	case "/help":
		b.handleHelp(chatID)
	case "/change_key":
		b.handleChangeKey(chatID)
	default:
		if len(text) > 3 && text[:3] == "sk-" {
			b.handleAPIKey(chatID, text)
		} else {
			b.handleGPTRequest(chatID, text)
		}
	}
}

func (b *Bot) handleStart(chatID int64) {
	text := `üëã –í—ñ—Ç–∞—é! –Ø –±–æ—Ç, —Å—Ç–≤–æ—Ä–µ–Ω–∏–π @hesher116, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∑ ChatGPT –Ω–∞–ø—Ä—è–º—É —á–µ—Ä–µ–∑ –≤–∞—à OpenAI API –∫–ª—é—á.

–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π OpenAI API –∫–ª—é—á.
–Ø–∫—â–æ —É –≤–∞—Å –π–æ–≥–æ –Ω–µ–º–∞—î, –æ—Ç—Ä–∏–º–∞–π—Ç–µ –Ω–∞ —Å–∞–π—Ç—ñ: https://platform.openai.com/account/api-keys

–î–ª—è –¥–æ–ø–æ–º–æ–≥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help`

	b.sendMessage(chatID, text)
}

func (b *Bot) handleHelp(chatID int64) {
	text := `üìå –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:

/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É
/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
/change_key - –ó–º—ñ–Ω–∏—Ç–∏ API –∫–ª—é—á

–ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ —è –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –¥–æ ChatGPT!`

	b.sendMessage(chatID, text)
}

func (b *Bot) handleChangeKey(chatID int64) {
	text := "üîë –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π API –∫–ª—é—á"
	b.sendMessage(chatID, text)
}

func (b *Bot) handleAPIKey(chatID int64, apiKey string) {
	if err := b.storage.SaveAPIKey(chatID, apiKey); err != nil {
		b.sendMessage(chatID, "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–ª—é—á–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
		return
	}

	b.sendMessage(chatID, "‚úÖ API –∫–ª—é—á —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
}

func (b *Bot) handleGPTRequest(chatID int64, text string) {
	apiKey, err := b.storage.GetAPIKey(chatID)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π API –∫–ª—é—á.")
		return
	}

	gpt := api.NewChatGPT(apiKey)
	response, err := gpt.SendMessage(text)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –ü–æ–º–∏–ª–∫–∞: %v", err))
		return
	}

	b.sendMessage(chatID, response)
}

func (b *Bot) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = tgbotapi.ModeMarkdown

	if _, err := b.api.Send(msg); err != nil {
		log.Printf("–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: %v", err)
	}
} 