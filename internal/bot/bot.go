package bot

import (
	"fmt"
	"log"
	"GPTGRAMM/internal/api"
	"GPTGRAMM/internal/storage"
	"time"
	"sync"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ —Ç–∏–ø–∏ —Ç–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏
const (
	maxRequestsPerDay = 10
	bypassCode       = "UNLIMITED_ACCESS"  // –ö–æ–¥–æ–≤–∞ —Ñ—Ä–∞–∑–∞ –¥–ª—è –æ–±—Ö–æ–¥—É –ª—ñ–º—ñ—Ç—É
)

// –î–æ–¥–∞—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
type UserSettings struct {
	Model       string
	RequestCount int
	LastRequest  time.Time
}

// Bot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –æ—Å–Ω–æ–≤–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
type Bot struct {
	api         *tgbotapi.BotAPI
	storage     *storage.Storage
	chatGPTs    map[int64]*api.ChatGPT
	users       map[int64]*UserSettings
	messageIDs  map[int64][]int // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—Å—ñ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —á–∞—Ç—É
	mu          sync.RWMutex
}

// NewBot —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
func NewBot(token string) (*Bot, error) {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("–ø–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞: %w", err)
	}

	storage, err := storage.NewStorage()
	if err != nil {
		return nil, fmt.Errorf("–ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å—Ö–æ–≤–∏—â–∞: %w", err)
	}

	return &Bot{
		api:         bot,
		storage:     storage,
		chatGPTs:    make(map[int64]*api.ChatGPT),
		users:       make(map[int64]*UserSettings),
		messageIDs:  make(map[int64][]int),
	}, nil
}

// Start –∑–∞–ø—É—Å–∫–∞—î –±–æ—Ç–∞ —Ç–∞ –ø–æ—á–∏–Ω–∞—î –æ–±—Ä–æ–±–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
func (b *Bot) Start() {
	log.Printf("–ë–æ—Ç %s –∑–∞–ø—É—â–µ–Ω–æ", b.api.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	for update := range updates {
		if update.CallbackQuery != nil {
			go b.handleCallback(update.CallbackQuery)
		} else if update.Message != nil {
			go b.handleMessage(update.Message)
		}
	}
}

func (b *Bot) handleMessage(message *tgbotapi.Message) {
	chatID := message.Chat.ID
	
	// –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
	b.mu.Lock()
	if b.messageIDs[chatID] == nil {
		b.messageIDs[chatID] = make([]int, 0)
	}
	b.messageIDs[chatID] = append(b.messageIDs[chatID], message.MessageID)
	b.mu.Unlock()

	text := message.Text

	switch text {
	case "/start":
		b.handleStart(chatID)
	case "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
		b.handleStats(chatID)
	case "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è":
		b.handleSettings(chatID)
	case "üîÑ –ù–æ–≤–∏–π —á–∞—Ç":
		b.handleNewChat(chatID)
	case "‚ùì –î–æ–ø–æ–º–æ–≥–∞":
		b.handleHelp(chatID)
	case bypassCode:
		b.handleBypassCode(chatID)
	default:
		if len(text) > 3 && text[:3] == "sk-" {
			b.handleAPIKey(chatID, text)
		} else {
			// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∑–≤–µ—Ä–Ω–µ–Ω—å –¥–æ GPT
			if !b.checkRequestLimit(chatID) && text != bypassCode {
				b.sendMessage(chatID, "‚ö†Ô∏è –í–∏ –¥–æ—Å—è–≥–ª–∏ –ª—ñ–º—ñ—Ç—É –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–¥–æ–≤—É —Ñ—Ä–∞–∑—É –¥–ª—è –Ω–µ–æ–±–º–µ–∂–µ–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É.")
				return
			}
			b.handleGPTRequest(chatID, text)
		}
	}
}

func (b *Bot) handleStart(chatID int64) {
	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤–∂–µ API –∫–ª—é—á
	apiKey, err := b.storage.GetAPIKey(chatID)
	if err == nil && apiKey != "" {
		text := `üëã –ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º! –†–∞–¥–∏–π –≤–∞—Å –∑–Ω–æ–≤—É –±–∞—á–∏—Ç–∏.
–ú–æ–∂–µ–º–æ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –Ω–∞—à—É —Ä–æ–∑–º–æ–≤—É. –ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!

–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º.`
		msg := tgbotapi.NewMessage(chatID, text)
		msg.ReplyMarkup = createMainKeyboard()
		if _, err := b.api.Send(msg); err != nil {
			log.Printf("–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: %v", err)
		}
		return
	}

	// –Ø–∫—â–æ –∫–ª—é—á–∞ –Ω–µ–º–∞—î, –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
	text := `üëã –í—ñ—Ç–∞—é! –Ø –±–æ—Ç, —Å—Ç–≤–æ—Ä–µ–Ω–∏–π @hesher116, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∑ ChatGPT –Ω–∞–ø—Ä—è–º—É —á–µ—Ä–µ–∑ –≤–∞—à OpenAI API –∫–ª—é—á.

–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π OpenAI API –∫–ª—é—á.
–Ø–∫—â–æ —É –≤–∞—Å –π–æ–≥–æ –Ω–µ–º–∞—î, –æ—Ç—Ä–∏–º–∞–π—Ç–µ –Ω–∞ —Å–∞–π—Ç—ñ: https://platform.openai.com/account/api-keys`

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = createMainKeyboard()
	if _, err := b.api.Send(msg); err != nil {
		log.Printf("–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: %v", err)
	}
}

func (b *Bot) handleHelp(chatID int64) {
	text := `üìå –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:

/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É
/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
/change_key - –ó–º—ñ–Ω–∏—Ç–∏ API –∫–ª—é—á

–ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ —è –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –¥–æ ChatGPT!`

	b.sendMessage(chatID, text)
}

func (b *Bot) handleAPIKey(chatID int64, apiKey string) {
	if err := b.storage.SaveAPIKey(chatID, apiKey); err != nil {
		b.sendMessage(chatID, "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–ª—é—á–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
		return
	}

	msg := tgbotapi.NewMessage(chatID, "‚úÖ API –∫–ª—é—á —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
	msg.ReplyMarkup = createMainKeyboard()
	if _, err := b.api.Send(msg); err != nil {
		log.Printf("–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: %v", err)
	}
}

func (b *Bot) handleGPTRequest(chatID int64, text string) {
	b.mu.Lock()
	gpt, exists := b.chatGPTs[chatID]
	if !exists {
		apiKey, err := b.storage.GetAPIKey(chatID)
		if err != nil {
			b.mu.Unlock()
			b.sendMessage(chatID, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π API –∫–ª—é—á.")
			return
		}
		model, _ := b.storage.GetUserSettings(chatID)
		gpt = api.NewChatGPT(apiKey)
		gpt.SetModel(model)
		b.chatGPTs[chatID] = gpt
	}
	b.mu.Unlock()

	response, err := gpt.SendMessage(text)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –ü–æ–º–∏–ª–∫–∞: %v", err))
		return
	}

	if err := b.storage.SaveToHistory(chatID, text, response); err != nil {
		log.Printf("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ —ñ—Å—Ç–æ—Ä—ñ—é: %v", err)
	}

	b.sendMessage(chatID, response, true)
}

func (b *Bot) sendMessage(chatID int64, text string, markdown ...bool) {
	msg := tgbotapi.NewMessage(chatID, text)
	if len(markdown) > 0 && markdown[0] {
		msg.ParseMode = tgbotapi.ModeMarkdown
	}

	sent, err := b.api.Send(msg)
	if err != nil {
		log.Printf("–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: %v", err)
		return
	}

	// –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞
	b.mu.Lock()
	if b.messageIDs[chatID] == nil {
		b.messageIDs[chatID] = make([]int, 0)
	}
	b.messageIDs[chatID] = append(b.messageIDs[chatID], sent.MessageID)
	b.mu.Unlock()
}

// –û–Ω–æ–≤–ª—é—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é createMainKeyboard
func createMainKeyboard() tgbotapi.ReplyKeyboardMarkup {
	buttons := [][]tgbotapi.KeyboardButton{
		{
			tgbotapi.KeyboardButton{Text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"},
			tgbotapi.KeyboardButton{Text: "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"},
		},
		{
			tgbotapi.KeyboardButton{Text: "üîÑ –ù–æ–≤–∏–π —á–∞—Ç"},
			tgbotapi.KeyboardButton{Text: "‚ùì –î–æ–ø–æ–º–æ–≥–∞"},
		},
	}

	return tgbotapi.ReplyKeyboardMarkup{
		Keyboard:       buttons,
		ResizeKeyboard: true,
	}
}

// –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
func (b *Bot) handleStats(chatID int64) {
	b.mu.RLock()
	stats := b.users[chatID]
	b.mu.RUnlock()

	if stats == nil {
		b.sendMessage(chatID, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ó–∞–ø–∏—Ç—ñ–≤ —Å—å–æ–≥–æ–¥–Ω—ñ: 0")
		return
	}

	text := fmt.Sprintf("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ó–∞–ø–∏—Ç—ñ–≤ —Å—å–æ–≥–æ–¥–Ω—ñ: %d/%d", 
		stats.RequestCount, maxRequestsPerDay)
	b.sendMessage(chatID, text)
}

func (b *Bot) handleSettings(chatID int64) {
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("GPT-3.5", "model_gpt3"),
			tgbotapi.NewInlineKeyboardButtonData("GPT-4", "model_gpt4"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, "‚öôÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å GPT:")
	msg.ReplyMarkup = keyboard
	if _, err := b.api.Send(msg); err != nil {
		log.Printf("–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: %v", err)
	}
}

func (b *Bot) handleBypassCode(chatID int64) {
	b.mu.Lock()
	b.users[chatID] = &UserSettings{} // –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫
	b.mu.Unlock()
	b.sendMessage(chatID, "‚úÖ –õ—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤ –∑–Ω—è—Ç–æ")
}

// –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –ª—ñ–º—ñ—Ç—É –∑–∞–ø–∏—Ç—ñ–≤
func (b *Bot) checkRequestLimit(chatID int64) bool {
	b.mu.Lock()
	defer b.mu.Unlock()

	if b.users[chatID] == nil {
		b.users[chatID] = &UserSettings{Model: api.ModelGPT3}
	}

	settings := b.users[chatID]

	if time.Since(settings.LastRequest).Hours() >= 24 {
		settings.RequestCount = 0
	}

	if settings.RequestCount >= maxRequestsPerDay {
		return false
	}

	settings.RequestCount++
	settings.LastRequest = time.Now()
	return true
}

// –û–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ callback-—ñ–≤
func (b *Bot) handleCallback(callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID
	log.Printf("–û—Ç—Ä–∏–º–∞–Ω–æ callback %s –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ %d", callback.Data, chatID)

	callbackResponse := tgbotapi.NewCallback(callback.ID, "")
	if _, err := b.api.Request(callbackResponse); err != nil {
		log.Printf("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ callback: %v", err)
	}

	var msg tgbotapi.MessageConfig // –û–≥–æ–ª–æ—à—É—î–º–æ –∑–º—ñ–Ω–Ω—É –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó

	switch callback.Data {
	case "clear_confirm":
		// –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
		updates, err := b.api.GetUpdates(tgbotapi.UpdateConfig{
			Offset:  0,
			Limit:   100,
			Timeout: 0,
		})
		if err != nil {
			log.Printf("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: %v", err)
			return
		}

		// –í–∏–¥–∞–ª—è—î–º–æ –∫–æ–∂–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
		for _, update := range updates {
			if update.Message != nil && update.Message.Chat.ID == chatID {
				deleteMsg := tgbotapi.NewDeleteMessage(chatID, update.Message.MessageID)
				if _, err := b.api.Request(deleteMsg); err != nil {
					log.Printf("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è %d: %v", update.Message.MessageID, err)
				}
			}
		}

		// –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è
		msg = tgbotapi.NewMessage(chatID, "‚úÖ –Ü—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É –æ—á–∏—â–µ–Ω–æ")
		msg.ReplyMarkup = createMainKeyboard()

	case "clear_cancel":
		msg = tgbotapi.NewMessage(chatID, "üîÑ –û—á–∏—â–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Å–∫–∞—Å–æ–≤–∞–Ω–æ")

	case "model_gpt3":
		log.Printf("–ó–º—ñ–Ω—é—î–º–æ –º–æ–¥–µ–ª—å –Ω–∞ GPT-3.5 –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ %d", chatID)
		if err := b.storage.SaveUserSettings(chatID, api.ModelGPT3); err != nil {
			msg = tgbotapi.NewMessage(chatID, "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –º–æ–¥–µ–ª—ñ")
			log.Printf("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å: %v", err)
		} else {
			msg = tgbotapi.NewMessage(chatID, "‚úÖ –ú–æ–¥–µ–ª—å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ GPT-3.5")
		}

	case "model_gpt4":
		log.Printf("–ó–º—ñ–Ω—é—î–º–æ –º–æ–¥–µ–ª—å –Ω–∞ GPT-4 –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ %d", chatID)
		if err := b.storage.SaveUserSettings(chatID, api.ModelGPT4); err != nil {
			msg = tgbotapi.NewMessage(chatID, "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –º–æ–¥–µ–ª—ñ")
			log.Printf("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å: %v", err)
		} else {
			msg = tgbotapi.NewMessage(chatID, "‚úÖ –ú–æ–¥–µ–ª—å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ GPT-4")
		}
	}

	if _, err := b.api.Send(msg); err != nil {
		log.Printf("–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: %v", err)
	}
}

// –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç—É
func (b *Bot) handleNewChat(chatID int64) {
	// –û—Ç—Ä–∏–º—É—î–º–æ API –∫–ª—é—á –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
	apiKey, err := b.storage.GetAPIKey(chatID)
	if err != nil || apiKey == "" {
		text := `üëã –î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π OpenAI API –∫–ª—é—á.
–Ø–∫—â–æ —É –≤–∞—Å –π–æ–≥–æ –Ω–µ–º–∞—î, –æ—Ç—Ä–∏–º–∞–π—Ç–µ –Ω–∞ —Å–∞–π—Ç—ñ: https://platform.openai.com/account/api-keys`
		b.sendMessage(chatID, text)
		return
	}

	// –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ—Ü–µ—Å—É
	msg := tgbotapi.NewMessage(chatID, "üîÑ –û—á–∏—â–µ–Ω–Ω—è —á–∞—Ç—É...")
	statusMsg, _ := b.api.Send(msg)

	// –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä ChatGPT –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å
	b.mu.Lock()
	model, _ := b.storage.GetUserSettings(chatID)
	gpt := api.NewChatGPT(apiKey)
	gpt.SetModel(model)
	b.chatGPTs[chatID] = gpt
	b.mu.Unlock()

	// –ì–æ—Ç—É—î–º–æ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
	text := `üÜï –ü–æ—á–∏–Ω–∞—î–º–æ –Ω–æ–≤–∏–π —á–∞—Ç!

–Ø –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º –∑ –±—É–¥—å-—è–∫–∏–º–∏ –ø–∏—Ç–∞–Ω–Ω—è–º–∏. 
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.

–ü–æ—Ç–æ—á–Ω–∞ –º–æ–¥–µ–ª—å: `

	if model == api.ModelGPT3 {
		text += "GPT-3.5"
	} else {
		text += "GPT-4"
	}

	// –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
	lastMsg := b.getLastMessageID(chatID)
	log.Printf("–ü–æ—á–∏–Ω–∞—î–º–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è —á–∞—Ç—É %d, –æ—Å—Ç–∞–Ω–Ω—ñ–π ID: %d", chatID, lastMsg)
	
	// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∞–¥–∞–ø—Ç–∏–≤–Ω–∏–π –∫—Ä–æ–∫
	deleteChan := make(chan struct{}, 50) // –ó–±—ñ–ª—å—à—É—î–º–æ –ø–∞—Ä–∞–ª–µ–ª—å–Ω—ñ—Å—Ç—å
	
	// –†–æ–∑–±–∏–≤–∞—î–º–æ –¥—ñ–∞–ø–∞–∑–æ–Ω –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–∏ –∑ —Ä—ñ–∑–Ω–∏–º–∏ –∫—Ä–æ–∫–∞–º–∏
	segments := []struct {
		start, end, step int
	}{
		{lastMsg - 100, lastMsg, 1},      // –û—Å—Ç–∞–Ω–Ω—ñ 100 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ –æ–¥–Ω–æ–º—É
		{lastMsg - 500, lastMsg - 100, 5}, // –ù–∞—Å—Ç—É–ø–Ω—ñ 400 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ 5
		{0, lastMsg - 500, 20},           // –°—Ç–∞—Ä—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ 20
	}

	for _, seg := range segments {
		for i := seg.end; i > seg.start && i > 0; i -= seg.step {
			deleteChan <- struct{}{}
			go func(msgID, step int) {
				defer func() { <-deleteChan }()
				
				// –í–∏–¥–∞–ª—è—î–º–æ –±–ª–æ–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
				for j := msgID; j > msgID-step && j > 0; j-- {
					if j != statusMsg.MessageID {
						deleteMsg := tgbotapi.NewDeleteMessage(chatID, j)
						if _, err := b.api.Request(deleteMsg); err == nil {
							log.Printf("–í–∏–¥–∞–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è %d –≤ —á–∞—Ç—ñ %d", j, chatID)
						}
					}
				}
			}(i, seg.step)
		}
	}

	// –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö –≥–æ—Ä—É—Ç–∏–Ω
	for i := 0; i < cap(deleteChan); i++ {
		deleteChan <- struct{}{}
	}

	// –û—á–∏—â–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
	if err := b.storage.ClearHistory(chatID); err != nil {
		log.Printf("–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó: %v", err)
	}

	// –í–∏–¥–∞–ª—è—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ—Ü–µ—Å—É
	deleteMsg := tgbotapi.NewDeleteMessage(chatID, statusMsg.MessageID)
	b.api.Request(deleteMsg)

	// –í –æ—Å—Ç–∞–Ω–Ω—é —á–µ—Ä–≥—É –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
	newMsg := tgbotapi.NewMessage(chatID, text)
	newMsg.ReplyMarkup = createMainKeyboard()
	sent, err := b.api.Send(newMsg)
	if err != nil {
		log.Printf("–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: %v", err)
		return
	}

	// –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –Ω–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
	b.mu.Lock()
	b.messageIDs[chatID] = []int{sent.MessageID}
	b.mu.Unlock()
}

// –û–ø—Ç–∏–º—ñ–∑—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ ID
func (b *Bot) getLastMessageID(chatID int64) int {
	b.mu.RLock()
	defer b.mu.RUnlock()
	
	if messages, ok := b.messageIDs[chatID]; ok && len(messages) > 0 {
		return messages[len(messages)-1] + 10 // –ó–º–µ–Ω—à—É—î–º–æ –∑–∞–ø–∞—Å, –±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∞–¥–∞–ø—Ç–∏–≤–Ω–∏–π –∫—Ä–æ–∫
	}
	return 50 // –ó–º–µ–Ω—à—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±
} 