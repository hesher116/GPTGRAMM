package bot

import (
	"GPTGRAMM/internal/api"
	"fmt"
	"log"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (b *Bot) handleMessage(message *tgbotapi.Message) {
	chatID := message.Chat.ID
	text := message.Text

	queue := b.getMessageQueue(chatID)
	queue.Add(message.MessageID)

	if state, ok := b.users.Load(chatID); ok && state == "awaiting_city" {
		b.getWeatherForCity(chatID, text)
		b.users.Delete(chatID)
		return
	}

	switch text {
	case "/start":
		logAction("–ö–û–ú–ê–ù–î–ê", chatID, "üëã –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏")
		b.handleStart(chatID)
	case "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
		logAction("–ö–û–ú–ê–ù–î–ê", chatID, "üìä –ü–µ—Ä–µ–≥–ª—è–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
		b.handleStats(chatID)
	case "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è":
		logAction("–ö–û–ú–ê–ù–î–ê", chatID, "‚öôÔ∏è –í—ñ–¥–∫—Ä–∏—Ç–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
		b.handleSettings(chatID)
	case "üîÑ –ù–æ–≤–∏–π —á–∞—Ç":
		b.handleNewChat(chatID)
	case "‚ùì –î–æ–ø–æ–º–æ–≥–∞":
		logAction("–ö–û–ú–ê–ù–î–ê", chatID, "‚ùì –ó–∞–ø–∏—Ç –¥–æ–ø–æ–º–æ–≥–∏")
		b.handleHelp(chatID)
	case "üåû –ü–æ–≥–æ–¥–∞":
		logAction("–ö–û–ú–ê–ù–î–ê", chatID, "üåû –ó–∞–ø–∏—Ç –∫–∞—Å—Ç–æ–º–Ω–æ—ó –ø–æ–≥–æ–¥–∏")
		b.customWeather(chatID)
	case bypassCode:
		logAction("–ö–û–ú–ê–ù–î–ê", chatID, "üîì –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –∫–æ–¥ –æ–±—Ö–æ–¥—É –ª—ñ–º—ñ—Ç—É")
		b.handleBypassCode(chatID)
	default:
		if len(text) > 3 && text[:3] == "sk-" {
			logAction("–ö–û–ú–ê–ù–î–ê", chatID, "üîë –û—Ç—Ä–∏–º–∞–Ω–æ API –∫–ª—é—á")
			b.handleAPIKey(chatID, text)
		} else {
			if !b.checkRequestLimit(chatID) && text != bypassCode {
				logAction("–ü–û–ú–ò–õ–ö–ê", chatID, "‚ö†Ô∏è –î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤")
				b.sendMessage(chatID, "‚ö†Ô∏è –í–∏ –¥–æ—Å—è–≥–ª–∏ –ª—ñ–º—ñ—Ç—É –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–¥–æ–≤—É —Ñ—Ä–∞–∑—É –¥–ª—è –Ω–µ–æ–±–º–µ–∂–µ–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É.")
				return
			}

			b.handleGPTRequest(chatID, text)
		}
	}
}

func (b *Bot) handleStart(chatID int64) {
	apiKey, err := b.Storage.GetAPIKey(chatID)
	if err == nil && apiKey != "" {
		text := `üëã –ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º! –†–∞–¥–∏–π –≤–∞—Å –∑–Ω–æ–≤—É –±–∞—á–∏—Ç–∏.
–ú–æ–∂–µ–º–æ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –Ω–∞—à—É —Ä–æ–∑–º–æ–≤—É. –ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!

–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º.`
		b.sendMessage(chatID, text)
		return
	}

	text := `üëã –í—ñ—Ç–∞—é! –Ø –±–æ—Ç, —Å—Ç–≤–æ—Ä–µ–Ω–∏–π @hesher116, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∑ ChatGPT –Ω–∞–ø—Ä—è–º—É —á–µ—Ä–µ–∑ –≤–∞—à OpenAI API –∫–ª—é—á.

–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π OpenAI API –∫–ª—é—á.
–Ø–∫—â–æ —É –≤–∞—Å –π–æ–≥–æ –Ω–µ–º–∞—î, –æ—Ç—Ä–∏–º–∞–π—Ç–µ –Ω–∞ —Å–∞–π—Ç—ñ: https://platform.openai.com/account/api-keys`
	b.sendMessage(chatID, text)
}

func (b *Bot) handleStats(chatID int64) {
	value, exists := b.users.Load(chatID)
	var requestCount int
	if exists && value != nil {
		settings := value.(UserSettings)
		requestCount = settings.RequestCount
	}

	text := fmt.Sprintf("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ó–∞–ø–∏—Ç—ñ–≤ —Å—å–æ–≥–æ–¥–Ω—ñ: %d/%d",
		requestCount, maxRequestsPerDay)
	b.sendMessage(chatID, text)
}

func (b *Bot) handleSettings(chatID int64) {
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("GPT-3.5", "model_gpt3"),
			tgbotapi.NewInlineKeyboardButtonData("GPT-4", "model_gpt4"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, "‚öôÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å GPT:")
	msg.ReplyMarkup = keyboard
	if _, err := b.api.Send(msg); err != nil {
		log.Printf("–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: %v", err)
	}
}

func (b *Bot) handleNewChat(chatID int64) {
	logAction("–ö–û–ú–ê–ù–î–ê", chatID, "üîÑ –ù–æ–≤–∏–π —á–∞—Ç")

	apiKey, err := b.Storage.GetAPIKey(chatID)
	if err != nil || apiKey == "" {
		logAction("–ü–û–ú–ò–õ–ö–ê", chatID, "API –∫–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
		b.sendMessage(chatID, "üëã –î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π OpenAI API –∫–ª—é—á.")
		return
	}

	model, _ := b.Storage.GetUserSettings(chatID)
	if model == "" {
		model = api.ModelGPT3
		if err := b.Storage.SaveUserSettings(chatID, model); err != nil {
			log.Printf("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –º–æ–¥–µ–ª—ñ: %v", err)
		}
	}
	modelName := map[string]string{api.ModelGPT3: "GPT-3.5", api.ModelGPT4: "GPT-4"}[model]

	if err := b.Storage.ClearHistory(chatID); err != nil {
		log.Printf("–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
	}

	time.Sleep(100 * time.Millisecond)
	gpt := api.NewChatGPT(apiKey)
	gpt.SetModel(model)
	b.chatGPTs.Store(chatID, gpt)

	text := fmt.Sprintf(`üÜï –ü–æ—á–∏–Ω–∞—î–º–æ –Ω–æ–≤–∏–π —á–∞—Ç!

ü§ñ –ü–æ—Ç–æ—á–Ω–∞ –º–æ–¥–µ–ª—å: %s
‚ö°Ô∏è –û—á–∏—â–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...`, modelName)

	tempMsg, err := b.api.Send(tgbotapi.NewMessage(chatID, text))
	if err != nil {
		log.Printf("–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: %v", err)
		return
	}

	messageTools := NewMessageTools(b.api)
	deletedCount, _ := messageTools.DeleteMessages(chatID, tempMsg.MessageID)

	deleteMsg := tgbotapi.NewDeleteMessage(chatID, tempMsg.MessageID)
	b.api.Request(deleteMsg)

	finalText := fmt.Sprintf(`üÜï –ù–æ–≤–∏–π —á–∞—Ç –≥–æ—Ç–æ–≤–∏–π!

ü§ñ –ü–æ—Ç–æ—á–Ω–∞ –º–æ–¥–µ–ª—å: %s
üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: %d

üí≠ –ú–æ–∂–µ—Ç–µ –ø–æ—á–∏–Ω–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è`, modelName, deletedCount)
	b.sendMessage(chatID, finalText)
}

func (b *Bot) handleHelp(chatID int64) {
	text := `üìå –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:

/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É

–ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ —è –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –¥–æ ChatGPT!`
	b.sendMessage(chatID, text)
}

func (b *Bot) customWeather(chatID int64) {
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ö–∏—ó–≤"),
			tgbotapi.NewKeyboardButton("–ö–∞–º'—è–Ω–µ—Ü—å-–ü–æ–¥—ñ–ª—å—Å—å–∫–∏–π"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–í–∞–ª–µ–Ω—Å—ñ—è"),
			tgbotapi.NewKeyboardButton("–î–∞–Ω–∞–Ω–≥"),
		),
	)
	msg := tgbotapi.NewMessage(chatID, "–í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞, –≤ —è–∫–æ–º—É —Ö–æ—á–µ—Ç–µ –≤–∑–Ω–∞—Ç–∏ –ø–æ–≥–æ–¥—É:")
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)

	b.users.Store(chatID, "awaiting_city")
}

func (b *Bot) getWeatherForCity(chatID int64, city string) {
	query := fmt.Sprintf("–ø–æ–≥–æ–¥–∞ –≤ %s. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é.", city)
	b.sendMessage(chatID, fmt.Sprintf("–ó–∞–ø–∏—Ç—É—é –ø–æ–≥–æ–¥—É –≤ –º—ñ—Å—Ç—ñ %s...", city))

	gpt, err := b.getOrCreateGPTInstance(chatID)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π API –∫–ª—é—á.")
		return
	}

	response, err := gpt.SendMessage(query)
	if err != nil {
		log.Printf("–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –ø–æ–≥–æ–¥–∏ –¥–ª—è –º—ñ—Å—Ç–∞ %s: %v", city, err)
		b.sendMessage(chatID, "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –ø–æ–≥–æ–¥–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")
		return
	}

	shortResponse := response
	if len(shortResponse) > 100 {
		shortResponse = shortResponse[:97] + "..."
	}
	logAction("–í–Ü–î–ü–û–í–Ü–î–¨", chatID, shortResponse)

	b.sendMessage(chatID, response)
}

func (b *Bot) handleBypassCode(chatID int64) {
	value, _ := b.users.Load(chatID)
	var settings UserSettings
	if value != nil {
		settings = value.(UserSettings)
	}

	settings.RequestCount = 0
	settings.LastRequest = time.Now()

	b.users.Store(chatID, settings)
	b.sendMessage(chatID, "‚úÖ –õ—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤ –∑–Ω—è—Ç–æ")
}

func (b *Bot) handleAPIKey(chatID int64, apiKey string) {
	if err := b.Storage.SaveAPIKey(chatID, apiKey); err != nil {
		logAction("–ü–û–ú–ò–õ–ö–ê", chatID, fmt.Sprintf("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ API –∫–ª—é—á: %v", err))
		b.sendMessage(chatID, "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–ª—é—á–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
		return
	}

	logAction("API_KEY", chatID, "API –∫–ª—é—á —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
	b.sendMessage(chatID, "‚úÖ API –∫–ª—é—á —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
}

func (b *Bot) checkRequestLimit(chatID int64) bool {
	value, exists := b.users.Load(chatID)

	var settings UserSettings
	if !exists || value == nil {
		settings = UserSettings{
			Model:        api.ModelGPT3,
			RequestCount: 0,
			LastRequest:  time.Now(),
		}
	} else {
		settings = value.(UserSettings)
	}

	if time.Since(settings.LastRequest).Hours() >= 24 {
		settings.RequestCount = 0
		settings.LastRequest = time.Now()
	}

	if settings.RequestCount >= maxRequestsPerDay {
		return false
	}

	settings.RequestCount++
	settings.LastRequest = time.Now()
	b.users.Store(chatID, settings)

	return true
}

func (b *Bot) getOrCreateGPTInstance(chatID int64) (*api.ChatGPT, error) {
	gptInstance, _ := b.chatGPTs.LoadOrStore(chatID, func() interface{} {
		apiKey, err := b.Storage.GetAPIKey(chatID)
		if err != nil {
			return nil
		}
		model, _ := b.Storage.GetUserSettings(chatID)
		if model == "" {
			model = api.ModelGPT3
			if err := b.Storage.SaveUserSettings(chatID, model); err != nil {
				log.Printf("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –º–æ–¥–µ–ª—ñ: %v", err)
			}
		}
		gpt := api.NewChatGPT(apiKey)
		gpt.SetModel(model)
		return gpt
	}())

	if gptInstance == nil {
		return nil, fmt.Errorf("API –∫–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
	}

	return gptInstance.(*api.ChatGPT), nil
}

func (b *Bot) handleGPTRequest(chatID int64, text string) {
	gpt, err := b.getOrCreateGPTInstance(chatID)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π API –∫–ª—é—á.")
		return
	}

	currentModel, _ := b.Storage.GetUserSettings(chatID)
	if currentModel != "" && gpt.GetModel() != currentModel {
		gpt.SetModel(currentModel)
		gpt.ClearContext()
	}

	model, _ := b.Storage.GetUserSettings(chatID)
	modelName := map[string]string{api.ModelGPT3: "GPT-3.5", api.ModelGPT4: "GPT-4"}[model]
	logAction("–ó–ê–ü–ò–¢", chatID, fmt.Sprintf("[%s] %s", modelName, text))

	response, err := gpt.SendMessage(text)
	if err != nil {
		logAction("–ü–û–ú–ò–õ–ö–ê", chatID, fmt.Sprintf("–ü–æ–º–∏–ª–∫–∞ GPT: %v", err))
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –ü–æ–º–∏–ª–∫–∞: %v", err))
		return
	}

	shortResponse := response
	if len(shortResponse) > 100 {
		shortResponse = shortResponse[:97] + "..."
	}
	logAction("–í–Ü–î–ü–û–í–Ü–î–¨", chatID, shortResponse)

	if err := b.Storage.SaveToHistory(chatID, text, response); err != nil {
		log.Printf("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ —ñ—Å—Ç–æ—Ä—ñ—é: %v", err)
	}

	b.sendMessage(chatID, response, true)
}

func (b *Bot) handleCallback(callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID
	logAction("CALLBACK", chatID, fmt.Sprintf("–î—ñ—è: %s", callback.Data))

	callbackResponse := tgbotapi.NewCallback(callback.ID, "")
	if _, err := b.api.Request(callbackResponse); err != nil {
		log.Printf("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ callback: %v", err)
	}

	// –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–∞—Ä—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π –Ω–∞ —Ä—ñ–≤–Ω—ñ –ø–∞–∫–µ—Ç—É
	var (
		modelMap = map[string]string{
			"gpt3": api.ModelGPT3,
			"gpt4": api.ModelGPT4,
		}
		readableModelMap = map[string]string{
			"gpt3": "GPT-3.5",
			"gpt4": "GPT-4",
		}
	)

	switch callback.Data {
	case "model_gpt3", "model_gpt4":
		parts := strings.Split(callback.Data, "_")
		if len(parts) < 2 {
			logAction("–ü–û–ú–ò–õ–ö–ê", chatID, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç callback.Data")
			return
		}
		currentModel := parts[1]

		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ç–∞–∫–∞ –º–æ–¥–µ–ª—å
		fullModelName, exists := modelMap[currentModel]
		if !exists {
			logAction("–ü–û–ú–ò–õ–ö–ê", chatID, fmt.Sprintf("–ù–µ–≤—ñ–¥–æ–º–∞ –º–æ–¥–µ–ª—å: %s", currentModel))
			return
		}

		// –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –º–æ–¥–µ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
		oldModel, err := b.Storage.GetUserSettings(chatID)
		logAction("–ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø", chatID, fmt.Sprintf("–ü–æ—Ç–æ—á–Ω–∞ –º–æ–¥–µ–ª—å: %s, –ù–æ–≤–∞ –º–æ–¥–µ–ª—å: %s", oldModel, fullModelName))

		// –Ø–∫—â–æ –º–æ–¥–µ–ª—å –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
		if err == nil && oldModel == fullModelName {
			logAction("–ú–û–î–ï–õ–¨", chatID, fmt.Sprintf("–°–ø—Ä–æ–±–∞ –∑–º—ñ–Ω–∏ –Ω–∞ –ø–æ—Ç–æ—á–Ω—É –º–æ–¥–µ–ª—å (%s)", fullModelName))
			b.sendMessage(chatID, fmt.Sprintf("‚ÑπÔ∏è %s –≤–∂–µ —î –ø–æ—Ç–æ—á–Ω–æ—é –º–æ–¥–µ–ª–ª—é", readableModelMap[currentModel]))
			return
		}

		// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –º–æ–¥–µ–ª—ñ
		if err := b.Storage.SaveUserSettings(chatID, fullModelName); err != nil {
			logAction("–ü–û–ú–ò–õ–ö–ê", chatID, fmt.Sprintf("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–º—ñ–Ω–∏—Ç–∏ –º–æ–¥–µ–ª—å: %v", err))
			b.sendMessage(chatID, "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –º–æ–¥–µ–ª—ñ")
			return
		}

		// –û–Ω–æ–≤–ª–µ–Ω–Ω—è GPT-–µ–∫–∑–µ–º–ø–ª—è—Ä–∞
		if gptInstance, exists := b.chatGPTs.Load(chatID); exists {
			if gpt, ok := gptInstance.(*api.ChatGPT); ok {
				gpt.SetModel(fullModelName)
				gpt.ClearContext()
				b.chatGPTs.Store(chatID, gpt)
			}
		}

		// –õ–æ–≥—É–≤–∞–Ω–Ω—è —ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
		logAction("–ú–û–î–ï–õ–¨", chatID, fmt.Sprintf("–ó–º—ñ–Ω–∞ –Ω–∞ %s", readableModelMap[currentModel]))
		b.sendMessage(chatID, fmt.Sprintf("‚úÖ –ú–æ–¥–µ–ª—å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ %s", readableModelMap[currentModel]))
	}
}
